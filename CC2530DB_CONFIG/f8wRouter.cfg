/*
 *                        f8wRouter.cfg
 *
 *  Compiler command-line options used to define a TI Z-Stack
 *  Router device. To move an option from here to the project
 *  file, comment out or delete the option from this file and
 *  enter it into the "Define Symbols" box under the Preprocessor
 *  tab of the C/C++ Compiler Project Options. New user defined
 *  options may be added to this file, as necessary.
 *
 */

/* Common To All Applications */
-DCPU32MHZ                         // CC2530s Run at 32MHz
-DROOT=__near_func                 // MAC/ZMAC code in NEAR

/* MAC Settings */
-DMAC_CFG_APP_PENDING_QUEUE=TRUE
-DMAC_CFG_TX_DATA_MAX=5
-DMAC_CFG_TX_MAX=8
-DMAC_CFG_RX_MAX=5

/* Router Settings */
-DRTR_NWK                          // Router Functions


/*
 *                           f8wConfig.cfg
 *
 *  Compiler command-line options used to define a TI Z-Stack ZigBee device.
 *  To move an option from here to the project file, comment out or delete the
 *  option from this file and enter it into the "Define Symbols" box under the
 *  Preprocessor tab of the C/C++ Compiler Project Options. New user defined
 *  options may be added to this file, as necessary.
 *
 *  Each macro is prefixed with '-D'. The entries are to be constructed as if
 *  they are to be on the compiler command line invocation (which they are).
 *
 *  NOTE: The RHS (Right-Hand-Side) must be quoted if there are embedded blanks.
 *        See the DEFAULT_KEY definition for an example.
 */

/* Enable ZigBee-Pro */
-DZIGBEEPRO

/* Set to 1 to enable security. To disable set to 0 */
-DSECURE=1
-DZG_SECURE_DYNAMIC=0

/* Enable the Reflector */
-DREFLECTOR

/* Default channel is Channel 11 - 0x0B */
// Channels are defined in the following:
//         0      : 868 MHz     0x00000001
//         1 - 10 : 915 MHz     0x000007FE
//        11 - 26 : 2.4 GHz     0x07FFF800
//
//-DMAX_CHANNELS_868MHZ     0x00000001
//-DMAX_CHANNELS_915MHZ     0x000007FE
//-DMAX_CHANNELS_24GHZ      0x07FFF800
//-DDEFAULT_CHANLIST=0x04000000  // 26 - 0x1A
//-DDEFAULT_CHANLIST=0x02000000  // 25 - 0x19
//-DDEFAULT_CHANLIST=0x01000000  // 24 - 0x18
//-DDEFAULT_CHANLIST=0x00800000  // 23 - 0x17
//-DDEFAULT_CHANLIST=0x00400000  // 22 - 0x16
//-DDEFAULT_CHANLIST=0x00200000  // 21 - 0x15
//-DDEFAULT_CHANLIST=0x00100000  // 20 - 0x14
//-DDEFAULT_CHANLIST=0x00080000  // 19 - 0x13
//-DDEFAULT_CHANLIST=0x00040000  // 18 - 0x12
//-DDEFAULT_CHANLIST=0x00020000  // 17 - 0x11
//-DDEFAULT_CHANLIST=0x00010000  // 16 - 0x10
//-DDEFAULT_CHANLIST=0x00008000  // 15 - 0x0F
//-DDEFAULT_CHANLIST=0x00004000  // 14 - 0x0E
//-DDEFAULT_CHANLIST=0x00002000  // 13 - 0x0D
//-DDEFAULT_CHANLIST=0x00001000  // 12 - 0x0C
-DDEFAULT_CHANLIST=0x00000800  // 11 - 0x0B

/* Define the default PAN ID.
 *
 * Setting this to a value other than 0xFFFF causes
 * ZDO_COORD to use this value as its PAN ID and
 * Routers and end devices to join PAN with this ID
 */
-DZDAPP_CONFIG_PAN_ID=0xFFFF

/* Minimum number of milliseconds to hold off the start of the device
 * in the network and the minimum delay between joining cycles.
 */
-DNWK_START_DELAY=100

/* Mask for the random joining delay. This value is masked with
 * the return from osal_rand() to get a random delay time for
 * each joining cycle.  This random value is added to NWK_START_DELAY.
 * For example, a value of 0x007F will be a joining delay of 0 to 127
 * milliseconds.
 */
-DEXTENDED_JOINING_RANDOM_MASK=0x007F

/* Minimum number of milliseconds to delay between each beacon request
 * in a joining cycle.
 */
-DBEACON_REQUEST_DELAY=100

/* Mask for the random beacon request delay. This value is masked with the
 * return from osal_rand() to get a random delay time for each joining cycle.
 * This random value is added to DBEACON_REQUEST_DELAY. For example, a value
 * of 0x00FF will be a beacon request delay of 0 to 255 milliseconds.
 */
-DBEACON_REQ_DELAY_MASK=0x00FF

/* Jitter mask for the link status report timer. This value is masked with the
 * return from osal_rand() to add a random delay to _NIB.nwkLinkStatusPeriod.
 * For example, a value of 0x007F allows a jitter between 0-127 milliseconds.
 */
-DLINK_STATUS_JITTER_MASK=0x007F

/* in seconds; set to 0 to turn off route expiry */
-DROUTE_EXPIRY_TIME=30

/* This number is used by polled devices, since the spec'd formula
 * doesn't work for sleeping end devices.  For non-polled devices,
 * a formula is used. Value is in 2 milliseconds periods
 */
-DAPSC_ACK_WAIT_DURATION_POLLED=3000

/*  Default indirect message holding timeout value:
 *  1-65535 (0 -> 65536) X CNT_RTG_TIMER X RTG_TIMER_INTERVAL
 */
-DNWK_INDIRECT_MSG_TIMEOUT=7

/* The number of simultaneous route discoveries in network */
-DMAX_RREQ_ENTRIES=8

/* The maximum number of retries allowed after a transmission failure */
-DAPSC_MAX_FRAME_RETRIES=3

/* Max number of times retry looking for the next hop address of a message */
-DNWK_MAX_DATA_RETRIES=2

/* Number of times retry to poll parent before indicating loss of synchronization
 * with parent. Note that larger value will cause longer delay for the child to
 * rejoin the network.
 */
-DMAX_POLL_FAILURE_RETRIES=2

/* The number of items in the broadcast table */
-DMAX_BCAST=9

/* The maximum number of groups in the groups table */
-DAPS_MAX_GROUPS=16

/* Number of entries in the regular routing table plus additional
 * entries for route repair
 */
-DMAX_RTG_ENTRIES=40

/* Maximum number of entries in the Binding table. */
-DNWK_MAX_BINDING_ENTRIES=4

/* Maximum number of cluster IDs for each binding table entry.
 * Note that any value other than the default value may cause a
 * compilation warning but Device Binding will function correctly.
 */
-DMAX_BINDING_CLUSTER_IDS=4

/* Default security key. */
-DDEFAULT_KEY="{0}"

/* Reset when ASSERT occurs, otherwise flash LEDs */
//-DASSERT_RESET

/* Set the MAC MAX Frame Size (802.15.4 default is 102) */
-DMAC_MAX_FRAME_SIZE=116

/* Minimum transmissions attempted for Channel Interference detection,
 * Frequency Agility can be disabled by setting this parameter to zero.
 */
-DZDNWKMGR_MIN_TRANSMISSIONS=20

/* Compiler keywords */
-DCONST="const __code"
-DGENERIC=__generic

/****************************************
 * The following are for End Devices only
 ***************************************/

-DRFD_RCVC_ALWAYS_ON=FALSE

/* The number of milliseconds to wait between data request polls to the coordinator. */
-DPOLL_RATE=1000

/* This is used after receiving a data indication to poll immediately
 * for queued messages...in milliseconds.
 */
-DQUEUED_POLL_RATE=100

/* This is used after receiving a data confirmation to poll immediately
 * for response messages...in milliseconds
 */
-DRESPONSE_POLL_RATE=100

/* This is used as an alternate response poll rate only for rejoin request.
 * This rate is determined by the response time of the parent that the device
 * is trying to join.
 */
-DREJOIN_POLL_RATE=440

/* Rejoin retry backoff silent period timer duration in milliseconds - default 15 minutes according to HA test spec */
-DREJOIN_BACKOFF=900000

/* Rejoin retry backoff scan timer duration in milliseconds - default 15 minutes according to HA test spec */
-DREJOIN_SCAN=900000

/* Latest sample apps use LED4 and do not use S1 switch */
-DENABLE_LED4_DISABLE_S1

/*
 *                        f8wZCL.cfg
 *
 *  Compiler command-line options used to define a ZigBee Cluster
 *  Library (ZCL) poject. To move an option from here to the project
 *  file, comment out or delete the option from this file and enter
 *  it into the "Define Symbols" box under the Preprocessor tab of
 *  the C/C++ Compiler Project Options. New user defined options may
 *  be added to this file, as necessary.
 *
 *  Each macro is prefixed with '-D'. The entries are to be constructed
 *  as if they are to be on the compiler command line invocation (which
 *  they are).
 */

/****************************************
 * The following are for Foundation only
 ****************************************/

/* ZCL Read enables the following commands:
 *   1) Read Attributes
 *   2) Read Attributes Response
 */
//-DZCL_READ

/* ZCL Write enables the following commands:
 *   1) Write Attributes
 *   2) Write Attributes Undivided
 *   3) Write Attributes Response
 *   4) Write Attributes No Response
 */
//-DZCL_WRITE

/* ZCL Report enables the following commands:
 *   1) Configure Reporting
 *   2) Configure Reporting Response
 *   3) Read Reporting Response
 *   4) Read Reporting Configuration Response
 *   5) Report Attributes
 */
//-DZCL_REPORT

/* ZCL Discover enables the following commands:
 *   1) Discover Attributes
 *   2) Discover Attributes Response
 *   3) Discover Commands Received
 *   4) Discover Commands Received Response
 *   5) Discover Commands Generated
 *   6) Discover Commands Generated Response
 *   7) Discover Attributes Extended
 *   8) Discover Attributes Extended Response
 */
//-DZCL_DISCOVER

/* EZ-Mode enables a button pairing to join/form a network and bind endpoints
 * together. ZCL_IDENTIFY must also be enabled to use this feature.
 *
//-DZCL_EZMODE

/**********************************************
 * The following are for General clusters only
 **********************************************/

/* ZCL Basic (ID 0x0000) enables the following command:
 *   1) Reset to Factory Defaults
 */
//-DZCL_BASIC

/* ZCL Power Configuration (ID 0x0001)
 * this cluster contains only attributes
 */
//-DZCL_POWER_CONFIG

/* ZCL Device Temperature Configuration (ID 0x0002)
 * this cluster contains only attributes
 */
//-DZCL_DEVICE_TEMP_CONFIG

/* ZCL Identify (ID 0x0003) enables the following commands:
 *   1) Identify Query
 *   2) Identify Query Response
 */
//-DZCL_IDENTIFY

/* ZCL Groups (ID 0x0004) enables the following commands:
 *   1) Add Group
 *   2) View Group
 *   3) Get Group Membership
 *   4) Remove Group
 *   5) Remove All Groups
 *   6) Add Group If Identifying
 *   7) Add Group Response
 *   8) View Group Response
 *   9) Get Group Membership Response
 *   10) Remove Group Response
 */
//-DZCL_GROUPS

/* ZCL Scenes (ID 0x0005) enables the following commands:
 *   1) Add Scene
 *   2) View Scene
 *   3) Remove Group
 *   4) Remove All Groups
 *   5) Store Scene
 *   6) Recall Scene
 *   7) Get Scene Membership
 *   8) Add Scene Response
 *   9) View Scene Response
 *   10) Remove Scene Response
 *   11) Remove All Scenes Response
 *   12) Store Scene Response
 *   13) Get Scene Membership Response
 */
//-DZCL_SCENES

/* ZCL On/Off (ID 0x0006) enables the following commands:
 *   1) On
 *   2) Off
 *   3) Toggle
 */
//-DZCL_ON_OFF

/* ZCL Level Control (ID 0x0008) enables the following commands:
 *   1) Move to Level
 *   2) Move
 *   3) Step
 */
//-DZCL_LEVEL_CTRL

/* ZCL Alarms (ID 0x0009) enables the following commands:
 *   1) Reset Alarm
 *   2) Reset All Alarms
 *   3) Get Alarm
 *   4) Reset Alarm Log
 *   5) Alarm
 *   6) Get Alarm Response
 */
//-DZCL_ALARMS

/* ZCL Time (ID 0x000A) enables:
 *   No commands, only attributes and code to update time
 */
//-DZCL_TIME

/* ZCL Location (ID 0x000B) enables the following commands:
 *   1) Set Absolute Location
 *   2) Set Device Configuration
 *   3) Get Device Configuration
 *   4) Get Location Data
 *   5) Device Configuration Response
 *   6) Location Data Response
 *   7) Location Data Notification
 *   8) Compact Location Data Notification
 *   9) RSSI Ping
 */
//-DZCL_LOCATION

/* ZCL Binary Input (Basic) (ID 0x000F) enables:
 *  this cluster contains only attributes
 */
//-DZCL_BINARY_INPUT_BASIC

/* ZCL Commissioning Cluster (ID 0x0015) enables the following commands:
 *  1) Restart Device
 *  2) Save Startup Parameters
 *  3) Restore Startup Parameters
 *  4) Reset Startup Parameters
 *  5) Restart Device Response Response
 *  6) Save Startup Parameters Response
 *  7) Restore Startup Parameters Response
 *  8) Reset Startup Parameters Response
 */
//-DZCL_COMMISSIONING

/* ZCL Parition Cluster (ID 0x0016) enables the following commands:
 *   1) Transfer Partitioned Frame
 *   2) Read Handshake Parameter
 *   3) Write Handshake Parameter
 *   4) MultipleACK
 *   5) Read Handshake Response
 */
//-DZCL_PARTITION

/* ZCL Window Covering (ID 0x0102) enables the following commands:
 *   1) Up / Open
 *   2) Down / Close
 *   3) Stop
 *   4) Go to Lift Setpoint
 *   5) Go to Lift Value
 *   6) Go to Lift Percentage
 *   7) Go to Tilt Setpoint
 *   8) Go to Tilt Value
 *   9) Go to Tilt Percentage
 *   10) Program Setpoint
 */
//-DZCL_WINDOWCOVERING

/* ZCL_LIGHT_LINK_ENHANCE enables General clusters enhancement, accroding to ZLL,
   with the following additional commands:
 *   1) Trigger effect                      (Identify cluster)
 *   2) Enhanced add scene                  (Scenes cluster)
 *   3) Enhanced view scene                 (Scenes cluster)
 *   4) Copy scene                          (Scenes cluster)
 *   5) Off with effect                     (On/off cluster)
 *   6) On with recall global scene         (On/off cluster)
 *   7) On with timed off                   (On/off cluster)
 *   8) Enhanced move to hue                (Color control cluster)
 *   9) Enhanced move hue                   (Color control cluster)
 *  10) Enhanced step hue                   (Color control cluster)
 *  11) Enhanced move to hue and saturation (Color control cluster)
 *  12) Color loop set                      (Color control cluster)
 *  13) Stop move step                      (Color control cluster)
 */
//-DZCL_LIGHT_LINK_ENHANCE

/* ZCL Power Profile Cluster (ID 0x001A)
 * Enables the following commands:
 * 1) Power Profile PowerProfileReq
 * 2) Power Profile PowerProfileStateReq
 * 3) Power Profile GetPowerProfilePriceRsp
 * 4) Power Profile GetOverallSchedulePriceRsp
 * 5) Power Profile EnergyPhasesScheduleNotification
 * 6) Power Profile EnergyPhasesScheduleRsp
 * 7) Power Profile PowerProfileScheduleConstraintsReq
 * 8) Power Profile EnergyPhasesScheduleStateReq
 * 9) Power Profile GetPowerProfilePriceExtRsp
 * 10) Power Profile PowerProfileNotification
 * 11) Power Profile PowerProfileRsp
 * 12) Power Profile PowerProfileStateRsp
 * 13) Power Profile GetPowerProfilePrice
 * 14) Power Profile PowerProfileStateNotification
 * 15) Power Profile GetOverallSchedulePrice
 * 16) Power Profile EnergyPhasesScheduleReq
 * 17) Power Profile EnergyPhasesScheduleStateRsp
 * 18) Power Profile EnergyPhasesScheduleStateNotification
 * 19) Power Profile PowerProfileScheduleConstraintsNotification
 * 20) Power Profile PowerProfileScheduleConstraintsRsp
 * 21) Power Profile GetPowerProfilePriceExt
 */
//-DZCL_POWER_PROFILE

/* ZCL EN50523 Appliance Control (ID 0x001B)
 * Enables the following commands:
 * 1) Appliance Control ExecutionOfACommand
 * 2) Appliance Control SignalState
 * 3) Appliance Control WriteFunctions
 * 4) Appliance Control OverloadPauseResume
 * 5) Appliance Control OverloadPause
 * 6) Appliance Control OverloadWarning
 * 7) Appliance Control SignalStateRsp
 * 8) Appliance Control SignalStateNotification
 */
//-DZCL_APPLIANCE_CONTROL

/* ZCL Poll Control (ID 0x0020)
 * Enables the following commands:
 *   1) Poll Control CheckIn
 *   2) Poll Control CheckInRsp
 *   3) Poll Control FastPollStop
 *   4) Poll Control SetLongPollInterval
 *   5) Poll Control SetShortPollInterval
 */
//-DZCL_POLL_CONTROL

/* ZCL Shade Configuration (ID 0x0100)
 * this cluster contains only attributes
 */
//-DZCL_SHADE_CONFIG

/* ZCL Door Lock (ID 0x0101)
 * Enables the following commands:
 *   1) Door Lock
 *   2) Door Lock Response
 *   3) Door Unlock
 *   4) Door Unlock Response
 *   5) Door Lock Toggle
 *   6) Door Lock Toggle Response
 *   7) Unlock with Timeout
 *   8) Unlock with Timeout Response
 *   9) Get Log Record
 *   10) Get Log Record Response
 *   11) Set PIN Code
 *   12) Set PIN Code Response
 *   13) Get PIN Code
 *   14) Get PIN Code Response
 *   15) Clear PIN Code
 *   16) Clear PIN Code Response
 *   17) Clear All PIN Codes
 *   18) Clear All PIN Codes Response
 *   19) Set User Status
 *   20) Set User Status Response
 *   21) Get User Status
 *   22) Get User Status Response
 *   23) Set Weekday Schedule
 *   24) Set Weekday Schedule Response
 *   25) Get Weekday Schedule
 *   26) Get Weekday Schedule Response
 *   27) Clear Weekday Schedule
 *   28) Clear Weekday Schedule Response
 *   29) Set Year Day Schedule
 *   30) Set Year Day Schedule Response
 *   31) Get Year Day Schedule
 *   32) Get Year Day Schedule Response
 *   33) Clear Year Day Schedule
 *   34) Clear Year Day Schedule Response
 *   35) Set Holiday Schedule
 *   36) Set Holiday Schedule Response
 *   37) Get Holiday Schedule
 *   38) Get Holiday Schedule Response
 *   39) Clear Holiday Schedule
 *   40) Clear Holiday Schedule Response
 *   41) Set User Type
 *   42) Set User Type Response
 *   43) Get User Type
 *   44) Get User Type Response
 *   45) Set RFID Code
 *   46) Set RFID Code Response
 *   47) Get RFID Code
 *   48) Get RFID Code Response
 *   49) Clear RFID Code
 *   50) Clear RFID Code Response
 *   51) Clear All RFID Codes
 *   52) Clear All RFID Codes Response
 *   53) Operation Event Notification
 *   54) Programming Event Notification
 */
//-DZCL_DOORLOCK

/* Enables ZCL Temperature Measurement (ID 0x0402)
 * this cluster contains only attributes
 */
//-DZCL_TEMPERATURE_MEASUREMENT

/* Enables ZCL Occupancy Sensing (ID 0x0406)
 * this cluster contains only attributes
 */
//-DZCL_OCCUPANCY_SENSING

/* Enables ZCL EN50523 Appliance Identification (ID 0x0B00)
 * this cluster contains only attributes
 */
//-DZCL_APPLIANCE_IDENTIFICATION

/* Enables ZCL Meter Identification Cluster (ID 0x0B01)
 * this cluster contains only attributes
 */
//-DZCL_METER_IDENTIFICATION

/* ZCL EN50523 Appliance Events & Alerts (ID 0x0B02)
 * Enables the following commands commands:
 * 1) Appliance Events & Alerts GetAlerts
 * 2) Appliance Events & Alerts GetAlertsRsp
 * 3) Appliance Events & Alerts AlertsNotification
 * 4) Appliance Events & Alerts EventNotification
 */
//-DZCL_APPLIANCE_EVENTS_ALERTS

/* ZCL EN50523 Appliance Statistcs (ID 0x0B03)
 * Enables the following commands:
 * 1) Appliance Statistics LogNotification
 * 2) Appliance Statistics LogRsp
 * 3) Appliance Statistics LogQueueRsp
 * 4) Appliance Statistics StatisticsAvailable
 * 5) Appliance Statistics LogReq
 * 6) Appliance Statistics LogQueueReq
 */
//-DZCL_APPLIANCE_STATISTICS

/* ZCL Electrical Measurement (ID 0x0B04)
 * Enables the following commands:
 *  1) Electrical Measurement GetProfileInfo
 *  2) Electrical Measurement GetProfileInfoRsp
 *  3) Electrical Measurement GetMeasurementProfile
 *  4) Electrical Measurement GetMeasurementProfileRsp
 */
//-DZCL_ELECTRICAL_MEASUREMENT

/* Enables ZCL Diagnostics (ID 0x0B05)
 * this cluster contains only attributes
 */
//-DZCL_DIAGNOSTIC

/* Enables ZCL HVAC Clusters
 * Includes: Pump Config and Control (ID 0x0200), Thermostat (ID 0x0201),
 *           Fan Control (ID 0x0202), Dehumidification Control (ID 0x0203),
 *           and Thermostat User Interface Config (ID 0x0204)
 */
//-DZCL_HVAC_CLUSTER

/******************************************
 * The following are for key establishment
 *****************************************/
/*
 * ZCL_KEY_ESTABLISH enables the ZCL Key Establishment Cluster
 */
//-DZCL_KEY_ESTABLISH

/**********************************************************
 * The following are for Security and Safety clusters only
 **********************************************************/

/* ZCL Zone (ID 0x0500) enables the following commands:
 *   1) Zone Status Change Notification
 *   2) Zone Enroll Request
 *   3) Zone Enroll Response
 *   4) Initiate Normal Operation Mode
 *   5) Initiate Test Mode
 */
//-DZCL_ZONE

/* ZCL ACE (ID 0x0501) enables the following commands:
 *   1) Arm
 *   2) Bypass
 *   3) Emergency
 *   4) Fire
 *   5) Panic
 *   6) Get Zone ID Map
 *   7) Get Zone Information
 *   8) Get Panel Status
 *   9) Get Bypassed Zone List
 *   10) Get Zone Status
 *   11) Arm Response
 *   12) Get Zone ID Map Response
 *   13) Get Zone Information Response
 *   14) Zone Status Changed
 *   15) Panel Status Changed
 *   16) Get Panel Status Response
 *   17) Set Bypassed Zone List
 *   18) Bypass Response
 *   19) Get Zone Status Response
 */
//-DZCL_ACE

/* ZCL Warning Device (ID 0x0502) enables the following commands:
 *   1) Start Warning
 *   2) Squawk
 */
//-DZCL_WD

/******************************************************************************
 * The following are for SE clusters only, with the exception of
 * ZCL_SE_METERING_SERVER, which is also used by HA 1.2
 ******************************************************************************/

/* ZCL_SE_PRICE_SERVER enables the ZCL_CLUSTER_ID_SE_PRICE
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_PRICE_SERVER

/* ZCL_SE_PRICE_CLIENT enables the ZCL_CLUSTER_ID_SE_PRICE
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_PRICE_CLIENT

/* ZCL_SE_DRLC_SERVER enables the ZCL_CLUSTER_ID_SE_DRLC
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_DRLC_SERVER

/* ZCL_SE_DRLC_CLIENT enables the ZCL_CLUSTER_ID_SE_DRLC
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_DRLC_CLIENT

/* ZCL_SE_METERING_SERVER enables the ZCL_CLUSTER_ID_SE_METERING
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_METERING_SERVER

/* ZCL_SE_METERING_CLIENT enables the ZCL_CLUSTER_ID_SE_METERING
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_METERING_CLIENT

/* ZCL_SE_MESSAGING_SERVER enables the ZCL_CLUSTER_ID_SE_MESSAGING
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_MESSAGING_SERVER

/* ZCL_SE_MESSAGING_CLIENT enables the ZCL_CLUSTER_ID_SE_MESSAGING
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_MESSAGING_CLIENT

/* ZCL_SE_TUNNELING_SERVER enables the ZCL_CLUSTER_ID_SE_TUNNELING
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_TUNNELING_SERVER

/* ZCL_SE_TUNNELING_CLIENT enables the ZCL_CLUSTER_ID_SE_TUNNELING
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_TUNNELING_CLIENT

/* ZCL_SE_PREPAYMENT_SERVER enables the ZCL_CLUSTER_ID_SE_PREPAYMENT
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_PREPAYMENT_SERVER

/* ZCL_SE_PREPAYMENT_CLIENT enables the ZCL_CLUSTER_ID_SE_PREPAYMENT
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_PREPAYMENT_CLIENT

/* ZCL_SE_ENERGY_MGMT_SERVER enables the ZCL_CLUSTER_ID_SE_ENERGY_MGMT
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_ENERGY_MGMT_SERVER

/* ZCL_SE_ENERGY_MGMT_CLIENT enables the ZCL_CLUSTER_ID_SE_ENERGY_MGMT
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_ENERGY_MGMT_CLIENT

/* ZCL_SE_CALENDAR_SERVER enables the ZCL_CLUSTER_ID_SE_CALENDAR
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_CALENDAR_SERVER

/* ZCL_SE_CALENDAR_CLIENT enables the ZCL_CLUSTER_ID_SE_CALENDAR
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_CALENDAR_CLIENT

/* ZCL_SE_DEVICE_MGMT_SERVER enables the ZCL_CLUSTER_ID_SE_DEVICE_MGMT
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_DEVICE_MGMT_SERVER

/* ZCL_SE_DEVICE_MGMT_CLIENT enables the ZCL_CLUSTER_ID_SE_DEVICE_MGMT
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_DEVICE_MGMT_CLIENT

/* ZCL_SE_EVENTS_SERVER enables the ZCL_CLUSTER_ID_SE_EVENTS
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_EVENTS_SERVER

/* ZCL_SE_EVENTS_CLIENT enables the ZCL_CLUSTER_ID_SE_EVENTS
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_EVENTS_CLIENT

/* ZCL_SE_MDU_PAIRING_SERVER enables the ZCL_CLUSTER_ID_SE_MDU_PAIRING
 * Client-to-Server handlers -- see zcl_se.h.
 */
//-DZCL_SE_MDU_PAIRING_SERVER

/* ZCL_SE_MDU_PAIRING_CLIENT enables the ZCL_CLUSTER_ID_SE_MDU_PAIRING
 * Server-to-Client handlers -- see zcl_se.h.
 */
//-DZCL_SE_MDU_PAIRING_CLIENT

/************************************************************
 * The following enables the ZCL Protocol Interfaces Clusters
 ************************************************************/

 /* ZCL_PI_CLUSTERS enables the following clusters:
  *   1) Generic Tunnel                       (ID 0x0600)
  *   2) BACnet Protocol Tunnel               (ID 0x0601)
  *   3) Analog Input (BACnet Regular)        (ID 0x0602)
  *   4) Analog Input (BACnet Extended)       (ID 0x0603)
  *   5) Analog Output (BACnet Regular)       (ID 0x0604)
  *   6) Analog Output (BACnet Extended)      (ID 0x0605)
  *   7) Analog Value (BACnet Regular)        (ID 0x0606)
  *   8) Analog Value (BACnet Extended)       (ID 0x0607)
  *   9) Binary Input (BACnet Regular)        (ID 0x0608)
  *  10) Binary Input (BACnet Extended)       (ID 0x0609)
  *  11) Binary Output (BACnet Regular)       (ID 0x060A)
  *  12) Binary Output (BACnet Extended)      (ID 0x060B)
  *  13) Binary Value (BACnet Regular)        (ID 0x060C)
  *  14) Binary Value (BACnet Extended)       (ID 0x060D)
  *  15) Multistate Input (BACnet Regular)    (ID 0x060E)
  *  16) Multistate Input (BACnet Extended)   (ID 0x060F)
  *  17) Multistate Output (BACnet Regular)   (ID 0x0610)
  *  18) Multistate Output (BACnet Extended)  (ID 0x0611)
  *  19) Multistate Value (BACnet Regular)    (ID 0x0612)
  *  20) Multistate Value (BACnet Extended)   (ID 0x0613)
  */
//-DZCL_PI_CLUSTERS
